{"version":3,"sources":["../src/app.js"],"names":["prisma","PrismaClient","app","use","express","json","post","req","res","body","name","email","data","user","create","result","title","content","authorEmail","author","connect","put","id","params","update","where","Number","viewCount","increment","error","findUnique","select","published","postData","undefined","updatedPost","get","findMany","users","posts","drafts","query","searchString","skip","take","orderBy","or","OR","contains","include","updatedAt","profile","e","$disconnect"],"mappings":"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","sourcesContent":["import express from 'express'\nimport { PrismaClient } from '@prisma/client'\n\n// routes\nconst prisma = new PrismaClient()\nconst app = express()\n\napp.use(express.json())\n\napp.post(`/signup`, async (req, res) => {\n  const { name, email } = req.body\n  const data = {data: {name, email}}\n  const result = await prisma.user.create(data)\n\n  res.json(result)\n})\n\napp.post(`/post`, async (req, res) => {\n  const { title, content, authorEmail } = req.body\n  const result = await prisma.post.create({\n    data: {\n      title,\n      content,\n      author: { connect: { email: authorEmail } },\n    },\n  })\n  res.json(result)\n})\n\napp.put('/post/:id/views', async (req, res) => {\n  const { id } = req.params\n\n  try {\n    const post = await prisma.post.update({\n      where: { id: Number(id) },\n      data: {\n        viewCount: {\n          increment: 1\n        }\n      }\n    })\n\n    res.json(post)\n  } catch (error) {\n    res.json({ error: `Post with ID ${id} does not exist in the database` })\n  }\n\n\n})\n\napp.put('/publish/:id', async (req, res) => {\n  const { id } = req.params\n\n  try {\n    const postData = await prisma.post.findUnique({\n      where: { id: Number(id) },\n      select: {\n        published: true\n      }\n    })\n\n    const updatedPost = await prisma.post.update({\n      where: { id: Number(id) || undefined },\n      data: { published: !postData?.published },\n    })\n    res.json(updatedPost)\n  } catch (error) {\n    res.json({ error: `Post with ID ${id} does not exist in the database` })\n  }\n\n})\n\napp.delete(`/post/:id`, async (req, res) => {\n  const { id } = req.params\n  const post = await prisma.post.delete({\n    where: {\n      id: Number(id),\n    },\n  })\n  res.json(post)\n})\n\napp.get('/users', async (req, res) => {\n  const users = await prisma.user.findMany()\n  res.json(users)\n})\n\napp.get('/user/:id/drafts', async (req, res) => {\n  const { id } = req.params\n\n  const drafts = await prisma.user.findUnique({\n    where: {\n      id: Number(id),\n    }\n  }).posts({\n    where: { published: false }\n  })\n\n  res.json(drafts)\n})\n\napp.get(`/post/:id`, async (req, res) => {\n  const { id } = req.params\n\n  const post = await prisma.post.findUnique({\n    where: { id: Number(id) },\n  })\n  res.json(post)\n})\n\napp.get('/feed', async (req, res) => {\n\n  const { searchString, skip, take, orderBy } = req.query\n\n  const or = searchString ? {\n    OR: [\n      { title: { contains: searchString} },\n      { content: { contains: searchString} },\n    ],\n  } : {}\n\n  const posts = await prisma.post.findMany({\n    where: {\n      published: true,\n      ...or\n    },\n    include: { author: true },\n    take: Number(take) || undefined,\n    skip: Number(skip) || undefined,\n    orderBy: {\n      updatedAt: orderBy\n    },\n  })\n\n  res.json(posts)\n})\n\napp.get('/', async (req, res) => {\n  const user = await prisma.user.findMany({\n    include: {\n      posts: true,\n      profile: true,\n    },\n  })\n    .catch((e) => {throw e})\n    .finally(async () => await prisma.$disconnect())\n\n  res.json({user})\n})\n\nexport default app;\n"],"file":"app.js"}